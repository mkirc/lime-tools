#!/bin/bash

_base_path="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

readonly LIME_DIR=/lime
readonly DEFS_FILE="$LIME_DIR"/Makefile.defs
readonly CONFIGURE="$LIME_DIR"/configure
readonly DEFAULT_MODEL=/model

trap cleanup SIGINT
trap cleanup SIGTERM
trap cleanup ERR

cleanup() {
    # lime tries to make -s limeclean after compilation,
    # but this also handles a user hitting CTRL-C
    # mid-compilation
    for f in "$DEFAULT_MODEL"/lime_*.x; do
        [[ -e "$f" ]] && rm "$f"
    done

    if [[ -e "$_base_path"/Makefile.bak ]]; then
        cp "$_base_path"/Makefile.bak "$LIME_DIR"/Makefile \
            && rm "$_base_path"/Makefile.bak
    fi
}

run_configure() {
    # if Makefile.defs does not exist or is older than ./configure,
    # run ./configure first.
    if [[ ! -e "$DEFS_FILE" ]] || [[ "$DEFS_FILE" -ot "$CONFIGURE"  ]]; then
        bash "$CONFIGURE"
        return $?
    fi
    return 0
}

if [[ -x "$LIME_DIR"/lime ]]; then
    run_configure

    if [[ $# -eq 0 ]]; then # no command line options
        cd "$DEFAULT_MODEL" || exit # test if default model dir exists
        bash "$LIME_DIR"/lime --no-ncurses "$@" ./model.c
        LIME_EXIT_STATUS=$?
    else
        bash "$LIME_DIR"/lime "$@"
        LIME_EXIT_STATUS=$?
    fi
    cleanup
    exit $LIME_EXIT_STATUS
else
    echo "lime executable (${LIME}) not found."
    exit 3
fi

